// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    // url      = env("DATABASE_URL")
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum TransactionType {
    BUY
    SELL
}

model Transaction {
    id              String          @id @default(cuid())
    userId          String
    name            String
    price           Float
    type            TransactionType
    description     String
    transactionDate DateTime
    createdAt       DateTime        @default(now())
    user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    password                 String? // @db.Text
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    username      String        @unique @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    steamId       String?
    accounts      Account[]
    sessions      Session[]
    Transactions  Transaction[]

    friends   User[] @relation("Friends")
    friendsOf User[] @relation("Friends")

    sentFriendRequests     FriendRequest[] @relation("FriendsRequestFrom")
    receivedFriendRequests FriendRequest[] @relation("FriendsRequestTo")
    Notifications          Notification[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model FriendRequest {
    id             String       @id @default(cuid())
    notificationId String
    notification   Notification @relation(fields: [notificationId], references: [id])
    from           User         @relation("FriendsRequestFrom", fields: [userIdFrom], references: [id])
    to             User         @relation("FriendsRequestTo", fields: [userIdTo], references: [id])
    accepted       Boolean
    createdAt      DateTime     @default(now())
    userIdFrom     String
    userIdTo       String
}

enum NotificationType {
    FRIEND_REQUEST
    FRIEND_ACCEPTED
    FRIEND_REJECTED
    FRIEND_REMOVED
    MESSAGE
}

model Notification {
    id        String            @id @default(cuid())
    userId    String
    message   String
    type      NotificationType?
    link      String?
    read      Boolean?          @default(false)
    createdAt DateTime          @default(now())
    user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

    friendRequest FriendRequest[]
}
